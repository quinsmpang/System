import { XmlNode } from '../DOM/XmlNode';
import { CappedString } from '@typescript-standard-library/core/Source/Text/CappedString';
export declare class XmlParserState {
    isOpenTag: boolean;
    isOpenTagStart: boolean;
    isOpenTagName: boolean;
    isOpenTagEnd: boolean;
    isCloseTag: boolean;
    isCloseTagStart: boolean;
    isCloseTagName: boolean;
    isCloseTagEnd: boolean;
    isAttribute: boolean;
    isAttributeName: boolean;
    isAttributeNameStart: boolean;
    isAttributeNameEnd: boolean;
    isAttributeValue: boolean;
    isAttributeValueStart: boolean;
    isAttributeValueEnd: boolean;
    isComment: boolean;
    isCommentStart: boolean;
    isCommentText: boolean;
    isCommentEnd: boolean;
    isCData: boolean;
    isCDataStart: boolean;
    isCDataText: boolean;
    isCDataEnd: boolean;
    isNodeTextContent: boolean;
    nodeName: string;
    nodeAttributeName: string;
    nodeAttributeValue: string;
    nodeAttributeQuot: string;
    nodeTextContent: string;
    commentTextContent: string;
    charDataContent: string;
    currentNode: XmlNode;
    previousText: CappedString;
    setOpenTagGroup(isGroup: boolean, isStart: boolean, isName: boolean, isEnd: boolean): void;
    setCommentGroup(isGroup: boolean, isStart: boolean, isText: boolean, isEnd: boolean): void;
    setCDataGroup(isGroup: boolean, isStart: boolean, isText: boolean, isEnd: boolean): void;
    setCloseTagGroup(isGroup: boolean, isStart: boolean, isName: boolean, isEnd: boolean): void;
    setAttributeNameGroup(isGroup: boolean, isStart: boolean, isEnd: boolean): void;
    setAttributeValueGroup(isGroup: boolean, isStart: boolean, isEnd: boolean): void;
    createNewNode(): void;
    switchToParentNode(): void;
    createTextNode(): void;
    createCommentNode(): void;
    createCDataNode(): void;
    createNodeAttribute(): void;
}
